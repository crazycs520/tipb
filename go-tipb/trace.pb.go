// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trace.proto

package tipb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Event int32

const (
	Event_Unknown                       Event = 0
	Event_TiKvCoprGetRequest            Event = 1000
	Event_TiKvCoprHandleRequest         Event = 1001
	Event_TiKvCoprScheduleTask          Event = 1002
	Event_TiKvCoprGetSnapshot           Event = 1003
	Event_TiKvCoprExecuteDagRunner      Event = 1004
	Event_TiKvCoprExecuteBatchDagRunner Event = 1005
)

var Event_name = map[int32]string{
	0:    "Unknown",
	1000: "TiKvCoprGetRequest",
	1001: "TiKvCoprHandleRequest",
	1002: "TiKvCoprScheduleTask",
	1003: "TiKvCoprGetSnapshot",
	1004: "TiKvCoprExecuteDagRunner",
	1005: "TiKvCoprExecuteBatchDagRunner",
}
var Event_value = map[string]int32{
	"Unknown":                       0,
	"TiKvCoprGetRequest":            1000,
	"TiKvCoprHandleRequest":         1001,
	"TiKvCoprScheduleTask":          1002,
	"TiKvCoprGetSnapshot":           1003,
	"TiKvCoprExecuteDagRunner":      1004,
	"TiKvCoprExecuteBatchDagRunner": 1005,
}

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}
func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (x *Event) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Event_value, data, "Event")
	if err != nil {
		return err
	}
	*x = Event(value)
	return nil
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptorTrace, []int{0} }

type ResourceGroupTag struct {
	SqlDigest        []byte `protobuf:"bytes,2,opt,name=sql_digest,json=sqlDigest" json:"sql_digest,omitempty"`
	PlanDigest       []byte `protobuf:"bytes,3,opt,name=plan_digest,json=planDigest" json:"plan_digest,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ResourceGroupTag) Reset()                    { *m = ResourceGroupTag{} }
func (m *ResourceGroupTag) String() string            { return proto.CompactTextString(m) }
func (*ResourceGroupTag) ProtoMessage()               {}
func (*ResourceGroupTag) Descriptor() ([]byte, []int) { return fileDescriptorTrace, []int{0} }

func (m *ResourceGroupTag) GetSqlDigest() []byte {
	if m != nil {
		return m.SqlDigest
	}
	return nil
}

func (m *ResourceGroupTag) GetPlanDigest() []byte {
	if m != nil {
		return m.PlanDigest
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourceGroupTag)(nil), "tipb.ResourceGroupTag")
	proto.RegisterEnum("tipb.Event", Event_name, Event_value)
}
func (m *ResourceGroupTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceGroupTag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SqlDigest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.SqlDigest)))
		i += copy(dAtA[i:], m.SqlDigest)
	}
	if m.PlanDigest != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTrace(dAtA, i, uint64(len(m.PlanDigest)))
		i += copy(dAtA[i:], m.PlanDigest)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTrace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResourceGroupTag) Size() (n int) {
	var l int
	_ = l
	if m.SqlDigest != nil {
		l = len(m.SqlDigest)
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.PlanDigest != nil {
		l = len(m.PlanDigest)
		n += 1 + l + sovTrace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTrace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTrace(x uint64) (n int) {
	return sovTrace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceGroupTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceGroupTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceGroupTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SqlDigest = append(m.SqlDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.SqlDigest == nil {
				m.SqlDigest = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrace
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanDigest = append(m.PlanDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.PlanDigest == nil {
				m.PlanDigest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTrace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTrace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTrace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTrace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrace   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("trace.proto", fileDescriptorTrace) }

var fileDescriptorTrace = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd0, 0xcb, 0x4e, 0x02, 0x31,
	0x14, 0xc6, 0x71, 0xc6, 0x4b, 0x1a, 0x0f, 0x2e, 0x9a, 0x0a, 0x11, 0x49, 0x18, 0x0d, 0x2b, 0x75,
	0x31, 0xbe, 0x03, 0x42, 0x30, 0x71, 0x63, 0x06, 0x5c, 0x9b, 0xd2, 0x39, 0x29, 0x13, 0xc6, 0xb6,
	0xf4, 0x82, 0x3e, 0x8a, 0xaf, 0xe3, 0xce, 0xa5, 0x8f, 0x60, 0x70, 0xe3, 0xf5, 0x1d, 0x0c, 0x43,
	0x26, 0x1a, 0x77, 0xcd, 0xff, 0xf7, 0xa5, 0x8b, 0x03, 0x75, 0x6f, 0xb9, 0xc0, 0xc4, 0x58, 0xed,
	0x35, 0xdb, 0xf2, 0xb9, 0x99, 0xb4, 0x1b, 0x52, 0x4b, 0x5d, 0x86, 0xb3, 0xd5, 0x6b, 0x6d, 0xdd,
	0x14, 0x68, 0x8a, 0x4e, 0x07, 0x2b, 0x70, 0x68, 0x75, 0x30, 0x63, 0x2e, 0x59, 0x07, 0xc0, 0xcd,
	0x8b, 0x9b, 0x2c, 0x97, 0xe8, 0x7c, 0x6b, 0xe3, 0x28, 0x3a, 0xde, 0x4d, 0x77, 0xdc, 0xbc, 0xe8,
	0x97, 0x81, 0x1d, 0x42, 0xdd, 0x14, 0x5c, 0x55, 0xbe, 0x59, 0x3a, 0xac, 0xd2, 0x7a, 0x70, 0xfa,
	0x18, 0xc1, 0xf6, 0x60, 0x81, 0xca, 0xb3, 0x3a, 0x90, 0x6b, 0x35, 0x53, 0xfa, 0x4e, 0xd1, 0x1a,
	0xdb, 0x07, 0x36, 0xce, 0x2f, 0x17, 0xe7, 0xda, 0xd8, 0x21, 0xfa, 0x14, 0xe7, 0x01, 0x9d, 0xa7,
	0x6f, 0x84, 0xb5, 0xa1, 0x59, 0xc1, 0x05, 0x57, 0x59, 0x81, 0x95, 0xbd, 0x13, 0x76, 0x00, 0x8d,
	0xca, 0x46, 0x62, 0x8a, 0x59, 0x28, 0x70, 0xcc, 0xdd, 0x8c, 0x7e, 0x10, 0xd6, 0x82, 0xbd, 0x3f,
	0xff, 0x8d, 0x14, 0x37, 0x6e, 0xaa, 0x3d, 0xfd, 0x24, 0xac, 0x03, 0xad, 0x4a, 0x06, 0xf7, 0x28,
	0x82, 0xc7, 0x3e, 0x97, 0x69, 0x50, 0x0a, 0x2d, 0xfd, 0x22, 0xac, 0x0b, 0x9d, 0x7f, 0xdc, 0xe3,
	0x5e, 0x4c, 0x7f, 0x37, 0xdf, 0xa4, 0x77, 0xf2, 0xb4, 0x8c, 0xa3, 0xe7, 0x65, 0x1c, 0xbd, 0x2c,
	0xe3, 0xe8, 0xe1, 0x35, 0xae, 0x41, 0x53, 0xe8, 0xdb, 0xc4, 0xe4, 0x4a, 0x0a, 0x6e, 0x12, 0x9f,
	0x67, 0x93, 0x64, 0x75, 0xd6, 0xab, 0xe8, 0x27, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xb2, 0xf4, 0xb8,
	0x6c, 0x01, 0x00, 0x00,
}
